{
    "contents" : "## Below are two functions that are used to create a special object \n## that stores a matrix and cache's its inverse. \n\n## The first function, makeCacheMatrix creates a special \"matrix\"\n## which is really a list containing a function to\n\n## 1) set the value of the Matrix\n## 2) get the value of the Matrix\n## 3) set the value of the inverse\n## 4) get the value of the inverse\n\n\nmakeCacheMatrix <- function(x = matrix()) {\n  m <- NULL\n  set <- function(y) {\n    x <<- y\n    m <<- NULL\n  }\n  get <- function() x\n  setinverse <- function(solve) m <<- solve\n  getinverse <- function() m\n  list(set = set, get = get,\n       setinverse = setinverse,\n       getinverse = getinverse)\n}\n\n\n## The following function calculates the inverse of the special \"matrix\" \n## created with the above function. It first checks to see if the inverse \n## has already been calculated. If so, it gets the inverse from the cache\n## and skips the computation. Otherwise, it calculates the inverse of the matrix\n## and sets the value of the inverse in the cache via the setinverse function.\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n  m <- x$getinverse()\n  if(!is.null(m)) {\n    message(\"getting cached data\")\n    return(m)\n  }\n  data <- x$get()\n  m <- solve(data, ...)\n  x$setinverse(m)\n  m\n}\n\n\n",
    "created" : 1416736757704.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "747207940",
    "id" : "CB7A9300",
    "lastKnownWriteTime" : 1416735096,
    "path" : "C:/Users/Cueto/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}